@using Sandbox;
@using System;
@using global::GameSystems
@using Sandbox.GameSystems.Player;
@inherits PanelComponent

<root>
	@if ( _showLeaderboard )
	{
		<div class="TableContainer">
			<!--<h2 class="TableTitle"> Current Players </h2>-->
			<div class="TableRow">
				<div class="TableHeader">Player Name</div>
				<div class="TableHeader">Job</div>
				<div class="TableHeader">Rank</div>
				<div class="TableHeader">Steam ID</div>
			</div>
			@foreach ( var player in GameController.Instance.Players )
			{
				<div class="TableRow">
					<div class="TableCell" style="color:@GetColorForUser( @player.Value, true )">@player.Value.Connection.DisplayName</div>
					<div class="TableCell" style="color:@GetColorForUser( @player.Value, true )">@GetJobNameForUser( @player.Value )</div>
					<div class="TableCell" style="color:@GetColorForUser( @player.Value, true );text-align:center">@player.Value.GetHighestUserGroup().Name.ToUpper()</div>
					<div class="TableCell" style="color:@GetColorForUser( @player.Value, true )">@player.Value.Connection.SteamId</div>
				</div>
			}
		</div>
	}
</root>

@code
{
	private bool _showLeaderboard;

	protected override void OnUpdate()
	{
		_showLeaderboard = Input.Down( "menu" );
	}

	private string GetJobNameForUser(NetworkPlayer p)
	{
		return p.Job.Name;
	}

	private string GetColorForUser(NetworkPlayer p, bool forceGroupColor = false)
	{
		return p.GetHighestUserGroup().Color.Hex;
	}

	/// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => HashCode.Combine(
	    _showLeaderboard,
	    GameController.Instance.Players
	    );
}
